[MUSIC]
I'm Stephen Wong.
>> I'm Joe Warren.
>> I'm Scott Rixner.
>> And I'm John Greiner.
>> I'd like to welcome
everyone to our class,
an introduction to interactive
computing in Python.
We've got a lot of fun activities
planned for the next eight weeks and.
To kind of get things rolling,
we've all wore our t-shirt for rock,
paper, scissor, lizard, Spock.
This is going to be your project
at the end of the first week.
So guys, let's just play a game of,
kind of a battle royale here.
And just we'll show them how it works.
>> 'Kay.
>> You ready?
>> Rock, paper, scissors,
lizard, Spock, shoot.
[LAUGH] Fizz it.
>> Who's [INAUDIBLE].
>> I'm, I'm scissors.
>> You're scissors.
>> Oh, Scissors.
>> No, no, this is.
>> Oh.
[CROSSTALK] [LAUGH].
>> I tried.
Anyways we're having fun doing this class,
and
I think you're going to have
a lot of fun doing the class.
I'll be back in a couple seconds and
we'll talk a little bit more about
the details and what's going to go on in
the class and maybe show you a couple
of exciting things you're going to do.
I'll see you in a second.
Well, welcome from the future.
That clip was shot in fall of 2012.
In the intervening time we've had five
very successful sessions of this class.
The class has kind of changed from being
eight weeks long to nine weeks long, and
now it's been changed to be.
Two pieces, one of five weeks,
one of four weeks.
And oh, yeah, my hair turned gray.
What I want to do here is kind of give
you an overview of the current state of
the class website and kind of share
a few ideas that have come up
during the course of these five sessions.
It'll hopefully help you
succeed in the class.
Then we'll go back to 2012.
We'll take a peek at the mini project
you're going to build at the conclusion of
this class, and kind of share
a little motivational material.
All right, let's take a quick
look at the class website.
So, here we are on the home page.
On the left hand side of
the page we have a collection of
links that then point to
important components of the class.
In the middle we have announcements.
We post a couple of announcements a week,
right now we have an announcement that
basically welcomes you to the class and
then talks a little bit
about Code Sculptor.
If we scroll down we'll see that they're
probably the three most important links in
the class, video lectures,
quizzes, and mini projects.
You should already understand
how video lectures work.
You're watching a video lecture right now.
We release these video lectures once
a week, right before the weekend starts.
The quizzes and the mini-projects
are due at 5:01 UTC on Sunday morning.
Which is for you folks in North America
it's late Saturday night.
I'm to talk a little bit about the quizzes
and the mini-projects and then I'll
explain a little bit about the rationale
for why, how we set our due dates.
So for week 0 and 1,
you have one quiz due.
For the remaining weeks you
have two quizzes a week due.
Here's kind of a link into the quizzes.
The most important thing to note here
is this quiz is due at 11:01 PM CST,
which again is 5:01 UTC on Sunday morning.
The reason we use UTC for all our times,
this is a world wide class.
So if you're interested in getting
everything in your local time zone,
go to your Coursera page and actually set
the time zone to your local time zone.
Notice here that the hard
deadline is actually one
week after the initial deadline.
So the way this works is,
if you turn the, turn your quiz in by the
given deadline you receive full credit.
If you miss that deadline,
you have one week where you
can submit it for 50% credit.
We also have given you seven late
dates for each half of the class.
If you just miss the deadline by a day or
two, you can apply a late date
to get that 50% penalty waived.
Just click this button here.
We also have mini-projects, these are
essentially programming assignments that
you will do for the class.
I'll talk a little bit more
about them later on in here.
The critical thing is you'll
have one mini-project per week.
Again, that will be due at
5:01 Sunday morning UTC.
For the Americans, that's going to
correspond to late Saturday night.
Now, one comment that we hear
very frequently is why don't you
make this due on Sunday afternoon or
Sunday evening for North Americans.
There's a couple of reasons,
the most important reason is that the
assignments are going to be peer assessed.
What that means is, we're not going to
grade these assignments via machine,
the assignments are going to
be sent to your peers and
they're going to assess them
according to a provided rubric.
We've designed the class so
that you can finish the assignments.
On Saturday and
then spend Sunday doing peer assessment.
For people in Asia, the due updates
are actually in the middle of
the day on Sunday, so
we stole in a reserve time for
them to actually do their
peer assessment on Sunday.
So they don't have to work on
the class during the weekdays,
because a lot of people, honestly, can't
work on the class during the weekdays.
We realize that some folks they
still can't make the deadline, so
this session we're trying something new.
We're going to release a late version
of each assignment after the initial
version is due.
If you submit to that latest version of
the assignment you can receive a maximum
of 50% credit on the initial assignment.
So your grade will the maximum of your
score on the initial version, and
50% of your score on the late version.
You're welcome to submit to both, and
you're welcome, for example, the submit to
the first, do your peer assessment,
examine some of your peers' solutions, and
then go back and actually redo your
code if you're unsatisfied and
try to build a better version.
Now, we'll talk about the honor
code in just a second.
What I want to point out is,
please, don't take something you
see from peer assessment and
submit it for your late solution.
That defeats the whole educational purs,
purpose of this class.
Okay, next are some tools that
we're going to use in this class.
The most important tool is CodeSkulptor.
It's going to be the environment
that you write all your programs in.
Scott will talk about
this in the next video.
Just kind of one quick tip,
if you're having trouble
getting code skulptor to run.
The FAQ here, frequently asked questions,
has lots of tips on getting
code skulptor running.
Please check that out
it'll help out a lot.
Viz mode is a debugging
visualization tool we developed for
CodeSkulptor, and
it's designed to help you to
understand what's going on when
you run your python programs.
We'll talk about that much
more as the class progresses.
These next four links are also important.
So, one of the things we've seen
in kind of doing this class is
that this is based on a real rice class
and as a result, it moves fairly quickly.
Now, kind of a common lament that
you'll see early in the class is,
there's no way this is a beginner class.
I can't do it, it's way too hard.
And kind of the best response that I've
ever seen to a comment like this is to
remember, that beginner
does not mean easy.
There can be beginner classes
that require you to do things.
And the reason we're
requiring you to do things is
because we want you to learn enough
to build a really cool game.
It's not to be mean.
It's for you to learn things, so
that you'll have skills that
you can use in the future.
So, you're going to see,
as the class goes on,
there's going to be
times you're challenged.
So what do you do whenever you need,
when you,
when you need help, when you get stuck?
First thing is discussion forums.
The forums in this class
are a wonderful place,
there's lots of helpful classmates here.
Don't be shy about reading the forums and
posting questions.
I think if you ask a question,
you'll find that there are lots of
people that would like to help you.
Concepts and examples,
I'll just kind of quickly visit there.
So, that's essentially a page
in which we have two things.
We have kind of an outline of
what's going on in the class.
It has links to all of the files
that we use in the class.
And we also have here,
we have actually student produced videos.
So, as things go on,
you'll see there are going to be
videos produced by students next week,
augment many of the videos that
we have built for the class here.
You don't like how we teach something,
make a video post in the forums,
we'll link it in here.
This next page down here I think is
actually probably the most important,
it's practice exercises.
So, again, there may be times in the class
when you say, well this is tough.
I've watched the videos, and
I thought I understood it but
I can't do the quizzes or
I cant do the mini project.
What do I do?
Again, another good piece of advice is,
watching videos is not going to
corresponding to pouring
knowledge in your head.
It's not the way it works.
You watch the videos,
it kind of gives you a familiarity with
the material, it helps you get started.
But the real work comes when you try to do
things with the knowledge you're learing.
So, if you find the quizzes and
the mini-project too difficult and
you need smaller things,
look at the practice exercises.
So, if we jump in here,
there's a set of practice sessions for
each half-week in the class.
So, for example,
if we go here to expressions,
there are actually a collection of
problems here that you can work through
at your own pace, they're not graded.
Which will allow you to, for
example, take a small problem.
We give you some code,
you write some code.
And then if you like,
you can look at our solution.
So these are kind of finger exercises that
allow you to get your hands, work with
the material, if you're having trouble
going from the videos to the quizzes and
the mini projects.
So if you're struggling, I highly
recommend doing the practice exercises.
I think these are the most useful tool,
that we have in this class to kind of,
get you over the hump from looking at and
reading about something to
actually doing something.
The final thing I want to talk about
is we have an honor code here, so,
I want you to take a few moments and
read it.
It's fairly self-explanatory,
I think the most important
thing about the honor code is this: this
class has been offered for five sessions.
There are many solutions to the problems
to this that can be found on wik.
Don't look at them, don't use them.
Couple of things first: if you find
another way, we can find them.
We have tools where if we wanted to,
we can go and actually.
Check to see that, oh yeah,
you pulled this off the web.
The second thing is, this class
is designed for you to learn, and
if you're actually pulling material
off the web then you're not learning.
So, you're cheating, but really,
the person you're cheating is yourself.
You're cheating yourself out of
the opportunity to learn the material.
This class is designed to help you
learn some very important material.
Material that can actually
improve your life substantially,
learning program is a powerful skill.
So, my suggestion is resist the urge,
don't go Google it.
Go look in the forums,
look in the practice exercises.
There will be other ways we
will talk about later where you
can actually ask for help.
Use the resources in the class.
I think that you'll find you can learn
a lot of cool stuff in this class.
Okay, back to 2012,
we'll finish things up.
Well, I promised you a peak at your
final project, and here it is.
This is Rice Rocks.
It's basically a clone of
a 80s arcade game Asteroids.
Let me just show you how it works here.
We'll click to get started,
and we use the arrow keys, and
we can fly our space ship around and
we destroy asteroids.
Every asteroid that we
destroy we get ten points.
If I happen to crash into an asteroid,
I lose a lot.
And the goal is to score as many points
as possible in your three lives.
Now, looking at this it may seem
kind of hard to imagine you could go
from knowing nothing about programming to
building a game like this in nine weeks.
The reality is we've designed the class
to teach you in each week a little bit
more of Python, so that doesn't,
that in those last two weeks.
You can build this project.
Now, we're going to give you a fair bit
of support in building that project.
We're going to provide
you with custom art.
We're going to provide you with
professionally produced sound.
We're going to provide you with
lots of videos and quizzes and
things to help you
understand how to do it.
But it's, it's not impossible.
4,100 people in fall 2012
managed to finish this project.
My hope is for this session we can get
10,000 students to build this project,
and I hope you're one of them.
So with that said, let me go on to the,
kind of our last segment.
I want to talk a little bit about
the philosophy of the class, and
somewhat echo what I just said there.
All right, let me finish up with kind of
a little bit about the philosophy that we
have for this class.
We're going to do our best
to put on a great class.
We're experimenting
with new techniques and
new methods to help you
learn the material better.
We may try for example some studies
involving how to improve peer assessment,
we created pystep.
When the things that we do,
sometimes if they go wrong,
we need your patience,
we'll work really hard to fix it.
If something specific to you goes wrong,
just remember there's going to
be many tens of thousands
of students in this class.
And it's going to be very hard for
us to address individual concerns.
But again, we'll try our best,
we need something from you.
Right?
There's going to be when you're
working on the mini project,
where you're going to get stuck,
you're going to be like,
I don't understand what's going on.
I don't know why my code's not working.
I'm going to talk about in Rock, Paper,
Scissor, Lizard, Spock some very tangible
things that you can go through to try to
keep making progress on the mini project.
But I can only tell you the most important
attribute you need right now is tenacity.
'Kay?
If you get frustrated and
you get stuck, don't quit.
Take a break for a little while, come back
and work on the mini project some more.
I think you'll find that as you kind
of work your way into the class,
the excitement of actually
building your mini projects, and
getting them working, will kind of carry
you through the frustration that you
feel if you're getting stuck
at some point in the process.
I'm going to say one
more thing about video.
There's times in this class where
we're going to do goofy stuff.
Our goal is to be video, is to be funny.
Sometimes we're lame, I admit it.
But we're trying to avoid being boring.
And so I'll end this with actually
pointing you back to kind of
another version of our introduction, that
I got ganged up on and had suppressed.
So take a look at it.
You guys ready to play?
>> Yep.
>> Yep.
>> Ready?
>> Okay.
>> Rock,
paper, scissors, lizards, Spock, shoot.
>> [LAUGH].
>> All right, let's do it again,
do it again, guys.
>> All right.
>> Ready?
Ready?
Rock, paper, scissors,
lizards, Spock, shoot.
[CROSSTALK] What'd you do, Scott?
>> Paper Yeah.
[LAUGH] Anyways, we were having
a lot of fun in this class and
I think you're going to
have a lot of fun too.

